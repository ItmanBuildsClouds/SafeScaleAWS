name: "CI Build Docker Image"

on:
    push:
        branches:
            - main
            - test/cicd2
        paths:
          - '02_app/**'

    pull_request:
        branches:
            - main
            - test/cicd2
        paths:
          - '02_app/**'


permissions:
    id-token: write
    contents: read

jobs:
    docker-build:
        runs-on: ubuntu-latest
        outputs:
          image_url: ${{ steps.meta.outputs.tags }}

        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: "arn:aws:iam::907253920314:role/github-actions"
                aws-region: eu-central-1

            - name: "Login to Amazon ECR"
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2


            - name: Get ECR Repository Name
              id: ecr-info
              run: |
                cd 03_terraform
                terraform init
                ECR_REPO=$(terraform output -raw ecr_name)
                echo "repo_name=$ECR_REPO" >> $GITHUB_OUTPUT


            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: ${{ steps.login-ecr.outputs.registry }}/${{ steps.ecr-info.outputs.repo_name }}
                tags: |
                  type=sha,prefix=,format=long


            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
                  
            - name: Build Docker Image
              id: build-image
              uses: docker/build-push-action@v5
              with:
                context: ./02_app
                platforms: linux/amd64
                push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/test/cicd2' }}
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                cache-from: type=gha
                cache-to: type=gha,mode=max

            - name: Build summary
              if: success()
              run: |
                echo "Build completed successsfully"
                if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/test/cicd2" ]]; then
                  echo "Image pushed to Docker Hub"
                  echo "Available tags:"
                  echo "${{ steps.meta.outputs.tags }}"
                else
                  echo "Image built locally - no push"
                fi
    deploy-infrastructure:
       name: "Deploy Infrastructure with Terraform"
       runs-on: ubuntu-latest
       needs: [docker-build]

       steps:
           - name: Checkout code
             uses: actions/checkout@v4

           - name: Configure AWS Credentials
             uses: aws-actions/configure-aws-credentials@v4
             with:
                 role-to-assume: "arn:aws:iam::907253920314:role/github-actions"
                 aws-region: eu-central-1

           - name: Setup Terraform
             uses: hashicorp/setup-terraform@v3

           - name: Deploy
             run: |
               cd 03_terraform
               terraform init
               terraform apply -auto-approve -var="image_url=${{ needs.docker-build.outputs.image_url }}"

           - name: Get ECS Info
             run: |
               cd 03_terraform
               terraform init
               ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)
               ECS_SERVICE=$(terraform output -raw ecs_service_name)
               echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
               echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV

           - name: Force ECS Update
             run: |
                aws ecs update-service \
                --cluster ${{ env.ECS_CLUSTER }} \
                --service ${{ env.ECS_SERVICE }} \
                --force-new-deployment
